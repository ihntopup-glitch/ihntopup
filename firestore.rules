/**
 * @fileoverview Firestore Security Rules for IHN TopUp application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and admin-based access control. Users can only access their own data, while administrators have broader permissions. Public readability is granted for certain collections containing non-sensitive, shared data.
 *
 * Data Structure:
 * The data is organized hierarchically, with user-specific data nested under `/users/{userId}`. Top-level collections like `/categories`, `/top_up_cards`, `/coupons`, `/banners`, `/notices` and `/payment_methods` store publicly accessible data.
 *
 * Key Security Decisions:
 * - **Ownership Enforcement**: User-specific data (profiles, orders, transactions, coupons) is strictly controlled through path-based ownership (`/users/{userId}`).
 * - **Admin Privileges**: The `isAdmin` field in the user profile grants administrative access to certain collections like `/support_tickets`.
 * - **Public Readability**: Collections like `/categories`, `/top_up_cards`, `/coupons`, `/banners`, `/notices` and `/payment_methods` are publicly readable to enable broad access to shared data.
 * - **Referral access**: Read access to referral collection is denied for all users. Write access is denied for non-admin users.
 *
 * Denormalization for Authorization:
 *  - The `isAdmin` field is denormalized into the User document to avoid extra reads when checking for admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the user is an existing owner.
     * Combines the ownership check with the existence check.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes, public read for individual profiles.
     * @path /users/{userId}
     * @allow (get) Anyone can read a user profile (for names/avatars in public sections).
     * @allow (create) User with ID 'user123' can create their own profile.
     *   request.auth.uid = 'user123'
     *   request.resource.data.id = 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *   request.auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   request.auth.uid = 'user456'
     *   request.resource.data.id = 'user123'
     * @deny (update) User with ID 'user456' cannot update the profile for 'user123'.
     *   request.auth.uid = 'user456'
     * @principle Enforces document ownership for writes, allows public read for names/avatars
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's order history.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order in their own profile.
     *   request.auth.uid = 'user123'
     *   request.resource.data.userId = 'user123'
     * @allow (get) User with ID 'user123' can read an order in their own profile.
     *   request.auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create an order for 'user123'.
     *   request.auth.uid = 'user456'
     *   request.resource.data.userId = 'user123'
     * @deny (update) User with ID 'user456' cannot update an order for 'user123'.
     *   request.auth.uid = 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's transaction history.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' can create a transaction in their own profile.
     *   request.auth.uid = 'user123'
     *   request.resource.data.userId = 'user123'
     * @allow (get) User with ID 'user123' can read a transaction in their own profile.
     *   request.auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a transaction for 'user123'.
     *   request.auth.uid = 'user456'
     *   request.resource.data.userId = 'user123'
     * @deny (update) User with ID 'user456' cannot update a transaction for 'user123'.
     *   request.auth.uid = 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to a user's coupons.
     * @path /users/{userId}/coupons/{userCouponId}
     * @allow (create) User with ID 'user123' can create a coupon in their own profile.
     *   request.auth.uid = 'user123'
     * @allow (get) User with ID 'user123' can read a coupon in their own profile.
     *   request.auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a coupon for 'user123'.
     *   request.auth.uid = 'user456'
     * @deny (update) User with ID 'user456' cannot update a coupon for 'user123'.
     *   request.auth.uid = 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/coupons/{userCouponId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (list) Any user can list categories.
     * @deny (create) No one can create a category without authentication.
     * @principle Publicly readable collection.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to top-up cards.
     * @path /top_up_cards/{topUpCardId}
     * @allow (get) Any user can read a top-up card.
     * @allow (list) Any user can list top-up cards.
     * @deny (create) No one can create a top-up card without authentication.
     * @principle Publicly readable collection.
     */
    match /top_up_cards/{topUpCardId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to coupons.
     * @path /coupons/{couponId}
     * @allow (get) Any user can read a coupon.
     * @allow (list) Any user can list coupons.
     * @deny (create) No one can create a coupon without authentication.
     * @principle Publicly readable collection.
     */
    match /coupons/{couponId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Restricts access to referral information.
      * @path /referrals/{referralId}
      * @deny (get) No user can read referral information.
      * @deny (create) No user can create referral information without authentication.
      * @principle Restricts access to a user's own data tree.
      */
     match /referrals/{referralId} {
        allow get: if false;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }

    /**
     * @description Allows public read access to banners.
     * @path /banners/{bannerId}
     * @allow (get) Any user can read a banner.
     * @allow (list) Any user can list banners.
     * @deny (create) No one can create a banner without authentication.
     * @principle Publicly readable collection.
     */
    match /banners/{bannerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin to read access to support tickets.
     * @path /support_tickets/{ticketId}
     * @allow (get) Any admin can read a support ticket.
     * @allow (list) Any admin can list support tickets.
     * @deny (create) No one can create a support ticket without authentication.
     * @principle Restricts access to a user's own data tree.
     */
    match /support_tickets/{ticketId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to notices.
     * @path /notices/{noticeId}
     * @allow (get) Any user can read a notice.
     * @allow (list) Any user can list notices.
     * @deny (create) No one can create a notice without authentication.
     * @principle Publicly readable collection.
     */
    match /notices/{noticeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to payment methods.
     * @path /payment_methods/{methodId}
     * @allow (get) Any user can read a payment method.
     * @allow (list) Any user can list payment methods.
     * @deny (create) No one can create a payment method without authentication.
     * @principle Publicly readable collection.
     */
    match /payment_methods/{methodId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public list for recent orders, private get for individual orders.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
      allow list: if true;
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid || isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }
  }
}
