rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user document exists and has the isAdmin flag set to true
      return isUserAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
      
      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      match /coupons/{userCouponId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }

    match /orders/{orderId} {
      // Any authenticated user can read their own orders, admins can read all.
      allow read: if isAdmin() || (isUserAuthenticated() && resource.data.userId == request.auth.uid);
      allow list: if isUserAuthenticated(); // Allows queries, which will be filtered in the app

      // An authenticated user can create an order for themselves.
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Owner or admin can update the order (e.g., status).
      allow update: if isAdmin() || (isUserAuthenticated() && request.auth.uid == resource.data.userId);

      // Only an admin can delete an order.
      allow delete: if isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /top_up_cards/{topUpCardId} {
      allow read: if true;
      
      // Allow authenticated users to update a card, but with very specific constraints.
      // This is crucial for updating the stock count during a transaction.
      allow update: if isUserAuthenticated()
                      // Ensure no other fields are being changed except for 'options'.
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['options'])
                      // Ensure that within the options array, only 'stockSoldCount' can increase.
                      && request.resource.data.options.size() == resource.data.options.size()
                      && (
                        size(
                          list.filter(
                            // Create a list of indices [0, 1, 2, ...]
                            list(0..request.resource.data.options.size()-1),
                            // For each index `i`, check if the update condition is met
                            i -> 
                              // Name and price must not change
                              request.resource.data.options[i].name == resource.data.options[i].name
                              && request.resource.data.options[i].price == resource.data.options[i].price
                              // stockSoldCount can only increase (by any amount, typically 1)
                              && request.resource.data.options[i].stockSoldCount >= resource.data.options[i].stockSoldCount
                              // All other fields in the option must remain unchanged
                          )
                        ) == request.resource.data.options.size() // All options must meet the criteria
                      );

      allow create, delete: if isAdmin();
    }
    
    match /coupons/{couponId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /referrals/{referralId} {
      allow read, write: if isAdmin();
      allow list: if isUserAuthenticated();
    }
    
    match /settings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /banners/{bannerId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /wallet_top_up_requests/{requestId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
    }

    match /support_tickets/{ticketId} {
        allow list: if isUserAuthenticated();
        allow read, write: if (isUserAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
    }

    match /notices/{noticeId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /payment_methods/{methodId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
