/**
 * @file Firebase Security Rules for IHN TopUp Application
 * @version 2
 *
 * @description This ruleset enforces a user-ownership model for private user data,
 * with admin overrides for specific collections. Public read access is granted to
 * certain collections like categories, top-up cards, and banners.
 *
 * @dataStructure
 * - /users/{userId}: User profile data, accessible only by the user or admin.
 * - /users/{userId}/transactions/{transactionId}: User-specific transactions.
 * - /users/{userId}/coupons/{userCouponId}: User-specific coupons.
 * - /orders/{orderId}: Orders, readable by all, writable by the owning user, and modifiable by admins.
 * - /categories/{categoryId}, /top_up_cards/{topUpCardId}, /banners/{bannerId}, /notices/{noticeId}, /payment_methods/{methodId}: Publicly readable collections.
 * - /referrals/{referralId}: Referrals, not publicly listable but accessible to admins and the referred user.
 * - /wallet_top_up_requests/{requestId}: Wallet top-up requests, accessible by admins and the requesting user.
 * - /support_tickets/{ticketId}: Support tickets, accessible by admins and the requesting user.
 *
 * @keySecurityDecisions
 * - Strict user-ownership for user profiles and related subcollections.
 * - Public read access to categories, top-up cards, banners, notices, and payment methods.
 * - Admin role required for modifying categories, top-up cards, coupons, banners, and notices.
 * - The 'referrals' collection is not listable to prevent data leaks.
 * - Denormalization: Order documents must contain the userId to authorize user-specific reads and writes.
 * - Only admins can create, update, and delete referrals.
 *
 * @denormalizationForAuthorization
 * - Orders: The 'Order' documents must include the 'userId' field for proper authorization. This enables
 *   rules to quickly verify ownership without additional `get()` calls.
 *
 * @structuralSegregation
 * - Private user data (transactions, coupons) is stored in subcollections under the /users/{userId} path,
 *   ensuring a clear separation between public and private data. This allows for efficient and secure list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- üîß Utility Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- üë§ Users Collection ---
    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (get) Admin can read any profile.
     * @allow (create) User can create their profile if the userId matches their auth.uid.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (update) Admin can update any profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @allow (delete) Admin can delete any profile.
     * @deny (get) Signed-in user tries to read another user's profile.
     * @deny (create) User attempts to create a profile with mismatched userId.
     * @principle Enforces document ownership for reads and writes, with admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    // --- üõí Orders (Public Read, Secure Write) ---
    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (get) Anyone can read order info.
     * @allow (list) Anyone can list order info.
     * @allow (create) Signed-in user can create their own order.
     * @allow (update) Admin can modify any order.
     * @allow (delete) Admin can delete any order.
     * @deny (create) User tries to create an order for another user.
     * @principle Allows public read access, but restricts writes to owners and admins.
     */
    match /orders/{orderId} {
      allow get, list: if true;

      // Only signed-in users can create their own order
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üí∞ User Transactions ---
    /**
     * @description Controls access to user transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get) Signed-in user can read their own transactions.
     * @allow (list) Signed-in user can list their own transactions.
     * @allow (create) Signed-in user can create transactions in their own account.
     * @allow (update) Signed-in user can update transactions in their own account.
     * @allow (delete) Signed-in user can delete transactions in their own account.
     * @allow (get) Admin can read any user's transactions.
     * @allow (list) Admin can list any user's transactions.
     * @allow (create) Admin can create transactions for any user.
     * @allow (update) Admin can update transactions for any user.
     * @allow (delete) Admin can delete transactions for any user.
     * @deny (get) Signed-in user tries to read another user's transactions.
     * @principle Enforces document ownership for reads and writes, with admin override.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get, list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    // --- üéüÔ∏è User Coupons ---
    /**
     * @description Controls access to user coupon documents within a user's subcollection.
     * @path /users/{userId}/coupons/{userCouponId}
     * @allow (get) Signed-in user can read their own coupons.
     * @allow (list) Signed-in user can list their own coupons.
     * @allow (create) Signed-in user can create coupons in their own account.
     * @allow (update) Signed-in user can update coupons in their own account.
     * @allow (delete) Signed-in user can delete coupons in their own account.
     * @allow (get) Admin can read any user's coupons.
     * @allow (list) Admin can list any user's coupons.
     * @allow (create) Admin can create coupons for any user.
     * @allow (update) Admin can update coupons for any user.
     * @allow (delete) Admin can delete coupons for any user.
     * @deny (get) Signed-in user tries to read another user's coupons.
     * @principle Enforces document ownership for reads and writes, with admin override.
     */
    match /users/{userId}/coupons/{userCouponId} {
      allow get, list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    // --- üß© Categories ---
    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get) Anyone can read category info.
     * @allow (list) Anyone can list category info.
     * @allow (create) Admin can create categories.
     * @allow (update) Admin can modify categories.
     * @allow (delete) Admin can delete categories.
     * @principle Allows public read access, but restricts writes to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üí≥ Top-up Cards ---
    /**
     * @description Controls access to top-up card documents.
     * @path /top_up_cards/{topUpCardId}
     * @allow (get) Anyone can read top-up card info.
     * @allow (list) Anyone can list top-up card info.
     * @allow (create) Admin can create top-up cards.
     * @allow (update) Admin can modify top-up cards.
     * @allow (delete) Admin can delete top-up cards.
     * @principle Allows public read access, but restricts writes to admins.
     */
    match /top_up_cards/{topUpCardId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üí∏ Coupons (Admin Control) ---
    /**
     * @description Controls access to coupon documents.
     * @path /coupons/{couponId}
     * @allow (get) Anyone can read coupon info.
     * @allow (list) Anyone can list coupon info.
     * @allow (create) Admin can create coupons.
     * @allow (update) Admin can modify coupons.
     * @allow (delete) Admin can delete coupons.
     * @principle Allows public read access, but restricts writes to admins.
     */
    match /coupons/{couponId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üë• Referrals ---
    /**
     * @description Controls access to referral documents.
     * @path /referrals/{referralId}
     * @allow (get) Admin can read referral info.
     * @allow (create) Admin can create referrals.
     * @allow (update) Admin can modify referrals.
     * @allow (delete) Admin can delete referrals.
     * @deny (list) No one can list referrals.
     * @principle Restricts access to admins only, denies listing to prevent data leaks.
     */
    match /referrals/{referralId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
        /**
     * @description Controls access to the referral settings singleton document.
     * @path /settings/referral
     */
    match /settings/referral {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }


    // --- üñºÔ∏è Banners ---
    /**
     * @description Controls access to banner documents.
     * @path /banners/{bannerId}
     * @allow (get) Anyone can read banner info.
     * @allow (list) Anyone can list banner info.
     * @allow (create) Admin can create banners.
     * @allow (update) Admin can modify banners.
     * @allow (delete) Admin can delete banners.
     * @principle Allows public read access, but restricts writes to admins.
     */
    match /banners/{bannerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üé´ Support Tickets ---
    /**
     * @description Controls access to support ticket documents.
     * @path /support_tickets/{ticketId}
     * @allow (create) Signed-in user can create their own support ticket.
     * @allow (get) Admin can read any support ticket.
     * @allow (list) Admin can list all support tickets.
     * @allow (update) Admin can modify any support ticket.
     * @allow (delete) Admin can delete any support ticket.
     * @deny (get) User tries to read another user's support ticket.
     * @principle Allows users to create their own tickets, but restricts access to admins only.
     */
    match /support_tickets/{ticketId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get, list: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üì¢ Notices ---
    /**
     * @description Controls access to notice documents.
     * @path /notices/{noticeId}
     * @allow (get) Anyone can read notice info.
     * @allow (list) Anyone can list notice info.
     * @allow (create) Admin can create notices.
     * @allow (update) Admin can modify notices.
     * @allow (delete) Admin can delete notices.
     * @principle Allows public read access, but restricts writes to admins.
     */
    match /notices/{noticeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üí≥ Payment Methods ---
    /**
     * @description Controls access to payment method documents.
     * @path /payment_methods/{methodId}
     * @allow (get) Anyone can read payment method info.
     * @allow (list) Anyone can list payment method info.
     * @allow (create) Admin can create payment methods.
     * @allow (update) Admin can modify payment methods.
     * @allow (delete) Admin can delete payment methods.
     * @principle Allows public read access, but restricts writes to admins.
     */
    match /payment_methods/{methodId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- üíº Wallet Top-up Requests ---
    /**
     * @description Controls access to wallet top-up request documents.
     * @path /wallet_top_up_requests/{requestId}
     * @allow (create) Signed-in user can create a top-up request for self.
     * @allow (get) Signed-in user can view their own requests.
     * @allow (list) Signed-in user can list their own requests.
     * @allow (update) Admin can update any request.
     * @allow (delete) Admin can delete any request.
     * @deny (get) User tries to read another user's requests.
     * @principle Allows users to create and view their own requests, but restricts modification to admins.
     */
    match /wallet_top_up_requests/{requestId} {
      // Signed-in user can create top-up request for self
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // User can only view their own requests
      allow get, list: if isSignedIn() && resource.data.userId == request.auth.uid;

      // Only admin can update or delete
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}