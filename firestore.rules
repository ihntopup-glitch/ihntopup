rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isRequestingUser(userId) {
      return request.auth.uid == userId;
    }

    function isExistingUser(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User profiles
    match /users/{userId} {
      // Users can read their own profile. Admins can read any profile.
      allow read: if isUserAuthenticated() && (isRequestingUser(userId) || isAdmin());
      // Users can create their own profile.
      allow create: if isUserAuthenticated() && isRequestingUser(userId);
       // Users can update their own profile. Admins can update any profile.
      allow update: if isUserAuthenticated() && (isRequestingUser(userId) || isAdmin());
      // Only admins can delete users. (Consider soft deletes instead)
      allow delete: if isAdmin();

      // Transactions subcollection
      match /transactions/{transactionId} {
        allow read, write: if isRequestingUser(userId) || isAdmin();
      }
       // Coupons subcollection
      match /coupons/{userCouponId} {
        allow read, write: if isRequestingUser(userId) || isAdmin();
      }
    }

    // Orders
    match /orders/{orderId} {
      // Users can read their own orders. Admins can read all orders.
      allow read: if isUserAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Authenticated users can create their own orders
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Admins can update any order (e.g., to change status). Users cannot update their own orders.
      allow update: if isAdmin();
      // Only admins can delete orders.
      allow delete: if isAdmin();
    }
    
    // Publicly readable collections
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can create, update, delete
    }

    match /top_up_cards/{topUpCardId} {
      allow read: if true;
      // Allow logged-in users to update (for stock counts), but only admins to create/delete
      allow update: if isUserAuthenticated();
      allow create, delete: if isAdmin();
    }

    match /coupons/{couponId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /banners/{bannerId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
     match /notices/{noticeId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /payment_methods/{methodId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Admin-only collections/documents
    match /referrals/{referralId} {
       allow read, write: if isAdmin();
    }
    
    match /settings/{docId} {
       allow read, write: if isAdmin();
    }
    
    match /wallet_top_up_requests/{requestId} {
      allow read: if isUserAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }
    
    match /support_tickets/{ticketId} {
       allow read, create: if isUserAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
       allow update, delete: if isAdmin();
    }
  }
}
