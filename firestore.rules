/**
 * @description This ruleset enforces a flexible security model prioritizing ease of access and prototyping speed, with minimal schema validation.
 *
 * Data Structure:
 * - User data is stored under `/users/{userId}`.
 * - Orders are stored in the `/orders/{orderId}` collection.
 * - Public data like categories, top-up cards, and coupons are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disabled by default.
 * - Public read access is granted to certain collections.
 * - The ruleset relies on `request.auth` for authorization.
 * - Orders can be read by anyone.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource user ID.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get) User with ID 'user123' reads their profile.
     * @allow (update) User with ID 'user123' updates their profile.
     * @allow (delete) User with ID 'user123' deletes their profile.
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Defines access rules for user transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' creates a transaction.
     * @allow (get) User with ID 'user123' reads a transaction.
     * @allow (update) User with ID 'user123' updates a transaction.
     * @allow (delete) User with ID 'user123' deletes a transaction.
     * @deny (create) User with ID 'user456' attempts to create a transaction for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Defines access rules for user coupons.
     * @path /users/{userId}/coupons/{userCouponId}
     * @allow (create) User with ID 'user123' creates a coupon.
     * @allow (get) User with ID 'user123' reads a coupon.
     * @allow (update) User with ID 'user123' updates a coupon.
     * @allow (delete) User with ID 'user123' deletes a coupon.
     * @deny (create) User with ID 'user456' attempts to create a coupon for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/coupons/{userCouponId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Defines access rules for orders.
     * @path /orders/{orderId}
     * @allow (get) Any user can read any order.
     * @allow (list) Any user can list orders.
     * @deny (create) Any user is denied from creating orders.
     * @deny (update) Any user is denied from updating orders.
     * @deny (delete) Any user is denied from deleting orders.
     * @principle Allows public read access to orders.
     */
    match /orders/{orderId} {
        //CRITICAL: per the user's instructions, all read permissions are open
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Defines access rules for categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read any category.
     * @allow (list) Any user can list categories.
     * @deny (create) Any user is denied from creating categories.
     * @deny (update) Any user is denied from updating categories.
     * @deny (delete) Any user is denied from deleting categories.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for top-up cards.
     * @path /top_up_cards/{topUpCardId}
     * @allow (get) Any user can read any top-up card.
     * @allow (list) Any user can list top-up cards.
     * @deny (create) Any user is denied from creating top-up cards.
     * @deny (update) Any user is denied from updating top-up cards.
     * @deny (delete) Any user is denied from deleting top-up cards.
     * @principle Allows public read access to top-up cards.
     */
    match /top_up_cards/{topUpCardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for coupons.
     * @path /coupons/{couponId}
     * @allow (get) Any user can read any coupon.
     * @allow (list) Any user can list coupons.
     * @deny (create) Any user is denied from creating coupons.
     * @deny (update) Any user is denied from updating coupons.
     * @deny (delete) Any user is denied from deleting coupons.
     * @principle Allows public read access to coupons.
     */
    match /coupons/{couponId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for referrals.
     * @path /referrals/{referralId}
     */
    match /referrals/{referralId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Defines access rules for referral settings.
      * @path /settings/referral
      */
     match /settings/referral {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }

    /**
     * @description Defines access rules for banners.
     * @path /banners/{bannerId}
     */
    match /banners/{bannerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for wallet top-up requests.
     * @path /wallet_top_up_requests/{requestId}
     */
    match /wallet_top_up_requests/{requestId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for support tickets.
     * @path /support_tickets/{ticketId}
     */
    match /support_tickets/{ticketId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for notices.
     * @path /notices/{noticeId}
     */
    match /notices/{noticeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for payment methods.
     * @path /payment_methods/{methodId}
     */
    match /payment_methods/{methodId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}