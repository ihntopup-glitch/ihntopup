rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to manage their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) - User 'abc' can create/update/delete their own profile (auth.uid == 'abc').
     * @deny (create, update, delete) - User 'def' cannot create/update/delete user 'abc''s profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, but enforce that the userId matches their auth UID.
      allow create: if isOwner(userId) && request.auth.uid == userId;

      // Allow the user to update their own profile, but ensure the userId remains immutable.
      allow update: if isOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows only the authenticated user to manage their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, update, delete) - User 'abc' can create/update/delete their own transaction (auth.uid == 'abc').
     * @deny (create, update, delete) - User 'def' cannot create/update/delete user 'abc''s transaction.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Helper function to check if the user is signed in and owns the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to read their own transactions.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own transactions.
      allow create: if request.auth.uid == userId;

      // Allow the user to update their own transactions.
      allow update: if request.auth.uid == userId;

      // Allow the user to delete their own transactions.
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Allows only the authenticated user to manage their own coupons.
     * @path /users/{userId}/coupons/{userCouponId}
     * @allow (create, update, delete) - User 'abc' can create/update/delete their own coupon (auth.uid == 'abc').
     * @deny (create, update, delete) - User 'def' cannot create/update/delete user 'abc''s coupon.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/coupons/{userCouponId} {
      // Helper function to check if the user is signed in and owns the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to read their own coupons.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own coupons.
      allow create: if request.auth.uid == userId;

      // Allow the user to update their own coupons.
      allow update: if request.auth.uid == userId;

      // Allow the user to delete their own coupons.
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Allows anyone to view orders, authenticated users to create orders, and admins to manage all orders.
     * @path /orders/{orderId}
     * @allow (get, list) - Anyone can view orders.
     * @allow (create) - Authenticated user 'abc' can create an order.
     * @allow (update, delete) - Admin user 'admin' can update/delete any order.
     * @deny (create, update, delete) - Non-admin user 'abc' cannot update/delete orders.
     * @principle Combines public read access with role-based write access.
     */
    match /orders/{orderId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user has admin privileges.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Helper function to check if the order belongs to the authenticated user.
      //function isOrderOwner(orderId) {
      //  return request.auth != null && get(/databases/$(database)/documents/orders/$(orderId)).data.userId == request.auth.uid;
      //}

       // Allow anyone to read any order.
      allow get: if true;
      allow list: if true;

      // Allow authenticated users to create orders.
      allow create: if isSignedIn();

      // Allow admins to update any order.
      allow update: if isAdmin();

      // Allow admins to delete any order.
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can view categories.
     * @deny (create, update, delete) - No one can create, update, or delete categories.
     * @principle Grants public read access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read top-up cards.
     * @path /top_up_cards/{topUpCardId}
     * @allow (get, list) - Anyone can view top-up cards.
     * @deny (create, update, delete) - No one can create, update, or delete top-up cards.
     * @principle Grants public read access.
     */
    match /top_up_cards/{topUpCardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read coupons, but only admins to manage them.
     * @path /coupons/{couponId}
     * @allow (get, list) - Anyone can view coupons.
     * @allow (create, update, delete) - Admin user 'admin' can create, update, or delete coupons.
     * @deny (create, update, delete) - Non-admin user 'abc' cannot create, update, or delete coupons.
     * @principle Combines public read access with role-based write access.
     */
    match /coupons/{couponId} {
      // Helper function to check if the user has admin privileges.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read all referrals, and users to read referrals where they are the referrer.
     * @path /referrals/{referralId}
     * @allow (get, list) - Admin user 'admin' can view all referrals.
     * @allow (get) - User 'abc' can view referrals where they are the referrer.
     * @deny (create, update, delete) - No one can create, update, or delete referrals (for now).
     * @principle Combines role-based access with user-specific access.
     */
    match /referrals/{referralId} {
      // Helper function to check if the user has admin privileges.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Helper function to check if the authenticated user is the referrer.
      function isReferrer() {
        return request.auth != null && request.resource.data.referrerId == request.auth.uid;
      }

      allow get: if isAdmin() || isReferrer();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows only admins to read and write referral settings.
     * @path /settings/referral
     * @allow (get, update) - Admin user 'admin' can view and update referral settings.
     * @deny (get, update) - Non-admin user 'abc' cannot view or update referral settings.
     * @principle Restricts access to a singleton document to admins.
     */
    match /settings/referral {
       // Helper function to check if the user has admin privileges.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read banners, but only admins to manage them.
     * @path /banners/{bannerId}
     * @allow (get, list) - Anyone can view banners.
     * @allow (create, update, delete) - Admin user 'admin' can create, update, or delete banners.
     * @deny (create, update, delete) - Non-admin user 'abc' cannot create, update, or delete banners.
     * @principle Combines public read access with role-based write access.
     */
    match /banners/{bannerId} {
       // Helper function to check if the user has admin privileges.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read all wallet top-up requests, and users to read their own requests.
     * @path /wallet_top_up_requests/{requestId}
     * @allow (get, list) - Admin user 'admin' can view all wallet top-up requests.
     * @allow (get) - User 'abc' can view their own wallet top-up requests.
     * @allow (update) - Admin user 'admin' can update the status of any wallet top-up request.
     * @deny (create, delete) - No one can create or delete wallet top-up requests through the rules.
     * @principle Combines role-based access with user-specific access.
     */
    match /wallet_top_up_requests/{requestId} {
      // Helper function to check if the user has admin privileges.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Helper function to check if the authenticated user is the owner of the request.
      function isOwner() {
        return request.auth != null && request.resource.data.userId == request.auth.uid;
      }

      allow get: if isAdmin() || isOwner();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Allows admins and the ticket creator to read support tickets.
     * @path /support_tickets/{ticketId}
     * @allow (get, list) - Admin user 'admin' can view all support tickets.
     * @allow (get) - User 'abc' can view their own support ticket.
     * @deny (create, update, delete) - No one can create, update, or delete support tickets (for now).
     * @principle Combines role-based access with user-specific access.
     */
    match /support_tickets/{ticketId} {
        // Helper function to check if the user has admin privileges.
        function isAdmin() {
            return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        // Helper function to check if the authenticated user is the owner of the ticket.
        function isOwner() {
            return request.auth != null && request.resource.data.userId == request.auth.uid;
        }

        allow get: if isAdmin() || isOwner();
        allow list: if isAdmin();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

   /**
     * @description Allows anyone to read notices.
     * @path /notices/{noticeId}
     * @allow (get, list) - Anyone can view notices.
     * @deny (create, update, delete) - No one can create, update, or delete notices.
     * @principle Grants public read access.
     */
    match /notices/{noticeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read payment methods.
     * @path /payment_methods/{methodId}
     * @allow (get, list) - Anyone can view payment methods.
     * @deny (create, update, delete) - No one can create, update, or delete payment methods.
     * @principle Grants public read access.
     */
    match /payment_methods/{methodId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}