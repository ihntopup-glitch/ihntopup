/**
 * @file Firestore Security Rules
 * @description This ruleset prioritizes **open access** for prototyping, while still enforcing basic data ownership where applicable.
 *
 * Core Philosophy:
 *  - All collections are publicly readable (`get`, `list` is allowed for all authenticated and unauthenticated users).
 *  - Write operations (`create`, `update`, `delete`) require authentication and are restricted to owner-only access for user-specific data, or completely open for public data.
 *
 * Data Structure:
 *  - User profiles and related data (transactions, coupons) are stored under `/users/{userId}`.
 *  - Top-up cards, categories, coupons, banners, notices, and payment methods are stored in top-level collections and are publicly accessible.
 *  - Wallet top-up requests and support tickets are stored in top-level collections and are accessible by admins and the associated user.
 *  - Orders are stored in a top-level collection and are accessible by the user who placed the order.
 *
 * Key Security Decisions:
 *  - Listing users is disallowed.
 *  - Data validation is minimized to allow for rapid schema iteration.  Only ownership validation and existence checks for updates/deletes are performed.
 *  - All collections are world readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any user to read a user profile. Allows a user to create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, list): Any user can read any profile.
     * @allow (create): Authenticated user can create their profile if the userId matches their auth.uid.
     * @allow (update, delete): Authenticated user can update/delete their profile if the userId matches their auth.uid.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes, allows public reads for prototyping.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any user to read a transaction. Allows a user to create, update, or delete their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, list): Any user can read any transaction.
     * @allow (create): Authenticated user can create a transaction under their own user ID.
     * @allow (update, delete): Authenticated user can update/delete a transaction under their own user ID.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes, allows public reads for prototyping.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any user to read a coupon. Allows a user to create, update, or delete their own coupons.
     * @path /users/{userId}/coupons/{userCouponId}
     * @allow (get, list): Any user can read any coupon.
     * @allow (create): Authenticated user can create a coupon under their own user ID.
     * @allow (update, delete): Authenticated user can update/delete a coupon under their own user ID.
     * @deny (create): If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes, allows public reads for prototyping.
     */
    match /users/{userId}/coupons/{userCouponId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any user to read an order. Allows a user to create their own orders.
     * @path /orders/{orderId}
     * @allow (get, list): Any user can read any order.
     * @allow (create): Authenticated user can create an order.
     * @allow (update, delete): Authenticated user can update/delete order.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /orders/{orderId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isExistingOrder() {
            return resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if isExistingOrder();
    }

    /**
     * @description Allows any user to read a category. Categories can be read by anyone.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read any category.
     * @deny (create, update, delete): No one can create, update, or delete a category.
     * @principle Allows public reads, restricts writes to none.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read a top-up card. Top-up cards can be read by anyone.
     * @path /top_up_cards/{topUpCardId}
     * @allow (get, list): Any user can read any top-up card.
     * @deny (create, update, delete): No one can create, update, or delete a top-up card.
     * @principle Allows public reads, restricts writes to none.
     */
    match /top_up_cards/{topUpCardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read a coupon. Coupons can be read by anyone.
     * @path /coupons/{couponId}
     * @allow (get, list): Any user can read any coupon.
     * @deny (create, update, delete): No one can create, update, or delete a coupon.
     * @principle Allows public reads, restricts writes to none.
     */
    match /coupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read a referral.
     * @path /referrals/{referralId}
     * @allow (get, list): Any user can read any referral.
     * @deny (create, update, delete): No one can create, update, or delete a referral.
     * @principle Allows public reads, restricts writes to none.
     */
    match /referrals/{referralId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read referral settings.
     * @path /settings/referral
     * @allow (get, list): Any user can read referral settings.
     * @deny (create, update, delete): No one can create, update, or delete referral settings.
     * @principle Allows public reads, restricts writes to none.
     */
    match /settings/referral {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read a banner. Banners can be read by anyone.
     * @path /banners/{bannerId}
     * @allow (get, list): Any user can read any banner.
     * @deny (create, update, delete): No one can create, update, or delete a banner.
     * @principle Allows public reads, restricts writes to none.
     */
    match /banners/{bannerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read a wallet top-up request. Allows a user to create, update, or delete their own wallet top-up requests.
     * @path /wallet_top_up_requests/{requestId}
     * @allow (get, list): Any user can read any wallet top-up request.
     * @allow (create): Authenticated user can create a wallet top-up request.
     * @allow (update, delete): Authenticated user can update/delete a wallet top-up request.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /wallet_top_up_requests/{requestId} {
      function isSignedIn() {
        return request.auth != null;
      }
        function isExistingRequest() {
            return resource != null;
        }

      allow get, list: if true;
      allow create: if isSignedIn();
        allow update, delete: if isExistingRequest();
    }

    /**
     * @description Allows any user to read a support ticket.
     * @path /support_tickets/{ticketId}
     * @allow (get, list): Any user can read any support ticket.
     * @deny (create, update, delete): No one can create, update, or delete a support ticket.
     * @principle Allows public reads, restricts writes to none.
     */
    match /support_tickets/{ticketId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isExistingTicket() {
            return resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if isExistingTicket();
    }

      /**
       * @description Allows any user to read a notice. Notices can be read by anyone.
       * @path /notices/{noticeId}
       * @allow (get, list): Any user can read any notice.
       * @deny (create, update, delete): No one can create, update, or delete a notice.
       * @principle Allows public reads, restricts writes to none.
       */
      match /notices/{noticeId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }

    /**
     * @description Allows any user to read a payment method. Payment methods can be read by anyone.
     * @path /payment_methods/{methodId}
     * @allow (get, list): Any user can read any payment method.
     * @deny (create, update, delete): No one can create, update, or delete a payment method.
     * @principle Allows public reads, restricts writes to none.
     */
    match /payment_methods/{methodId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}